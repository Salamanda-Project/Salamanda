{
  "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "address[4]",
          "name": "initialHolders",
          "type": "address[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "initialAmounts",
          "type": "uint256[4]"
        },
        {
          "internalType": "bool",
          "name": "enableAntiBot",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxTxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWalletAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTxAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWalletAmount",
          "type": "uint256"
        }
      ],
      "name": "AntiBotConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blocked",
          "type": "bool"
        }
      ],
      "name": "ContractStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InitialDistributionComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SecuritySettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TradingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "excludeFromLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludedFromLimits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setAntiBotEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "blocked",
          "type": "bool"
        }
      ],
      "name": "setContractStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxTxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxWalletAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "updatePauseStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
  "receipt": {
    "to": null,
    "from": "0xae6009Dd36eBBE2d36DBEBA64004e31517Cc48BB",
    "contractAddress": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
    "transactionIndex": 90,
    "gasUsed": "1381252",
    "logsBloom": "0x
    "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed",
    "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb"
        ],
        "data": "0x00000000000000000000000000000b7abc627050305adf14a3d9e40000000000",
        "logIndex": 115,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb",
          "0x000000000000000000000000b174659c69bc97b7d1be4d8012d80cd0a374194e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000056bc75e2d63100000",
        "logIndex": 116,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb",
          "0x000000000000000000000000ea4d95cc1c1bb90d398bed9ddf5dae3d64b85f6b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000ad78ebc5ac6200000",
        "logIndex": 117,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb",
          "0x000000000000000000000000f8da925da2695c484b687c236a1e5becb9f3f81c"
        ],
        "data": "0x00000000000000000000000000000000000000000000001b1ae4d6e2ef500000",
        "logIndex": 118,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb",
          "0x000000000000000000000000ba884a1a579288680af80092974ae308384d3588"
        ],
        "data": "0x00000000000000000000000000000000000000000000003635c9adc5dea00000",
        "logIndex": 119,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 8019291,
        "transactionHash": "0xfd3a2152d5832ac4bb8698a5f6f611309b3d4767af3bff096590de5ea5b6d695",
        "address": "0x0422E8419Fa33a975c5923Ab90fd5269d6A734dA",
        "topics": [
          "0x0091797718383457eafcb8600ff903ce41cd8e28b20bc5a8df996532910b85dd"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x05725d0f22207046afa42f54672b4a4fe43b524804785126707ca70d00b069ed"
      }
    ],
    "blockNumber": 8019291,
    "cumulativeGasUsed": "9229574",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Template Token 2",
    "TMPL2",
    18,
    "1000000000000000000000000",
    "0xae6009Dd36eBBE2d36DBEBA64004e31517Cc48BB",
    [
      "0xb174659C69bC97b7D1Be4d8012d80cD0A374194e",
      "0xEa4d95CC1c1bB90d398bEd9DdF5dAE3D64b85f6B",
      "0xF8dA925Da2695c484b687c236A1e5beCB9F3F81C",
      "0xba884a1a579288680af80092974ae308384D3588"
    ],
    [
      "100000000000000000000",
      "200000000000000000000",
      "500000000000000000000",
      "1000000000000000000000"
    ],
    true,
    "10000000000000000000000",
    "20000000000000000000000"
  ],
  "numDeployments": 19,
  "solcInputHash": "1cf4d539634d26b350cba92da35b7018",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"initialHolders\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"initialAmounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"enableAntiBot\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"AntiBotConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"ContractStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitialDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SecuritySettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiBotEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"updatePauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/TokenTemplate.sol\":\"TokenTemplate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"contracts/core/TokenTemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../extensions/AntiBot.sol\\\";\\r\\nimport \\\"../utils/SecurityUtils.sol\\\";\\r\\n\\r\\ncontract TokenTemplate is ERC20, Ownable {\\r\\n    using AntiBot for AntiBot.AntiBotConfig;\\r\\n    using SecurityUtils for SecurityUtils.SecuritySettings;\\r\\n\\r\\n    bool public tradingEnabled;\\r\\n    uint256 public launchTime;\\r\\n    uint256 public launchBlock;\\r\\n    \\r\\n    // Flag to track initial distribution status\\r\\n    bool private _initialDistributionComplete;\\r\\n    \\r\\n    AntiBot.AntiBotConfig private _antiBotConfig;\\r\\n    SecurityUtils.SecuritySettings private _securitySettings;\\r\\n    \\r\\n    mapping(address => bool) public isExcludedFromLimits;\\r\\n\\r\\n    event TradingEnabled(uint256 timestamp);\\r\\n    event AntiBotConfigUpdated(bool enabled, uint256 maxTxAmount, uint256 maxWalletAmount);\\r\\n    event SecuritySettingsUpdated(bool paused);\\r\\n    event ContractStatusChanged(address indexed contractAddr, bool trusted, bool blocked);\\r\\n    event InitialDistributionComplete();\\r\\n    \\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals,\\r\\n        uint256 totalSupply,\\r\\n        address _initialOwner,\\r\\n        address[4] memory initialHolders,\\r\\n        uint256[4] memory initialAmounts,\\r\\n        bool enableAntiBot,\\r\\n        uint256 maxTxAmount,\\r\\n        uint256 maxWalletAmount\\r\\n    ) ERC20(name, symbol) Ownable(_initialOwner) {\\r\\n        require(initialHolders.length == initialAmounts.length, \\\"Arrays length mismatch\\\");\\r\\n        \\r\\n        _securitySettings.initialize();  // Initialize with minimal defaults\\r\\n        \\r\\n        // Mint tokens to the contract creator (TokenFactory)\\r\\n        _mint(msg.sender, totalSupply * (10 ** decimals));\\r\\n        \\r\\n        // Perform initial distributions without trading check\\r\\n        _initialDistributionComplete = false;\\r\\n        for (uint i = 0; i < initialHolders.length; i++) {\\r\\n            if (initialHolders[i] != address(0) && initialAmounts[i] > 0) {\\r\\n                _transfer(msg.sender, initialHolders[i], initialAmounts[i]);\\r\\n            }\\r\\n        }\\r\\n        _initialDistributionComplete = true;\\r\\n        emit InitialDistributionComplete();\\r\\n        \\r\\n        // Setup anti-bot config (disabled by default)\\r\\n        _antiBotConfig.initialize(\\r\\n            maxTxAmount > 0 ? maxTxAmount : totalSupply * 10 / 100,\\r\\n            maxWalletAmount > 0 ? maxWalletAmount : totalSupply * 20 / 100\\r\\n        );\\r\\n        \\r\\n        // Exclude owner from limits\\r\\n        isExcludedFromLimits[owner()] = true;\\r\\n    }\\r\\n    \\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(!tradingEnabled, \\\"Trading already enabled\\\");\\r\\n        tradingEnabled = true;\\r\\n        launchTime = block.timestamp;\\r\\n        launchBlock = block.number;\\r\\n        emit TradingEnabled(launchTime);\\r\\n    }\\r\\n    \\r\\n    function setAntiBotEnabled(bool enabled) external onlyOwner {\\r\\n        _antiBotConfig.enabled = enabled;\\r\\n        emit AntiBotConfigUpdated(enabled, _antiBotConfig.maxTxAmount, _antiBotConfig.maxWalletAmount);\\r\\n    }\\r\\n    \\r\\n    function setMaxTxAmount(uint256 amount) external onlyOwner {\\r\\n        _antiBotConfig.maxTxAmount = amount;\\r\\n        emit AntiBotConfigUpdated(_antiBotConfig.enabled, amount, _antiBotConfig.maxWalletAmount);\\r\\n    }\\r\\n    \\r\\n    function setMaxWalletAmount(uint256 amount) external onlyOwner {\\r\\n        _antiBotConfig.maxWalletAmount = amount;\\r\\n        emit AntiBotConfigUpdated(_antiBotConfig.enabled, _antiBotConfig.maxTxAmount, amount);\\r\\n    }\\r\\n    \\r\\n    function excludeFromLimits(address account, bool excluded) external onlyOwner {\\r\\n        isExcludedFromLimits[account] = excluded;\\r\\n    }\\r\\n    \\r\\n    function updatePauseStatus(bool paused) external onlyOwner {\\r\\n        _securitySettings.setPaused(paused);\\r\\n        emit SecuritySettingsUpdated(paused);\\r\\n    }\\r\\n\\r\\n    function setContractStatus(\\r\\n        address contractAddr,\\r\\n        bool trusted,\\r\\n        bool blocked\\r\\n    ) external onlyOwner {\\r\\n        _securitySettings.setContractStatus(contractAddr, trusted, blocked);\\r\\n        emit ContractStatusChanged(contractAddr, trusted, blocked);\\r\\n    }\\r\\n\\r\\n    function _update(address from, address to, uint256 amount) internal override {\\r\\n        // Skip all checks for:\\r\\n        // 1. Owner operations\\r\\n        // 2. Excluded addresses\\r\\n        // 3. Initial distribution process\\r\\n        if (from == owner() || \\r\\n            to == owner() || \\r\\n            isExcludedFromLimits[from] || \\r\\n            isExcludedFromLimits[to] ||\\r\\n            !_initialDistributionComplete) {\\r\\n            super._update(from, to, amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Simple security check\\r\\n        require(!_securitySettings.paused, \\\"Transfers paused\\\");\\r\\n        \\r\\n        // Only check trading if not excluded\\r\\n        require(tradingEnabled, \\\"Trading not enabled\\\");\\r\\n\\r\\n        // Apply anti-bot measures only if enabled\\r\\n        if (_antiBotConfig.enabled) {\\r\\n            _antiBotConfig.applyAntiBotLimits(\\r\\n                address(this),\\r\\n                from,\\r\\n                to,\\r\\n                amount,\\r\\n                balanceOf(to),\\r\\n                launchTime,\\r\\n                launchBlock\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // Call the parent function to proceed with the transfer\\r\\n        super._update(from, to, amount);\\r\\n    }\\r\\n    \\r\\n    // Add helper function to exclude liquidity manager from all restrictions\\r\\n    function whitelistLiquidityManager(address manager) external onlyOwner {\\r\\n        isExcludedFromLimits[manager] = true;\\r\\n        _securitySettings.setContractStatus(manager, true, false);\\r\\n        emit ContractStatusChanged(manager, true, false);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8135b6b2f4e4dadf36bc10dc084611d2ed73716d9915dd70cae3c6320bc44069\",\"license\":\"MIT\"},\"contracts/extensions/AntiBot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @title AntiBot\\r\\n * @dev Simplified anti-bot measures for token launches\\r\\n */\\r\\nlibrary AntiBot {\\r\\n    struct AntiBotConfig {\\r\\n        bool enabled;\\r\\n        uint256 maxTxAmount;\\r\\n        uint256 maxWalletAmount;\\r\\n        mapping(address => bool) blacklisted;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Initializes anti-bot configuration\\r\\n     * @param config Anti-bot config storage pointer\\r\\n     * @param _maxTxAmount Maximum transaction amount\\r\\n     * @param _maxWalletAmount Maximum wallet balance\\r\\n     */\\r\\n    function initialize(\\r\\n        AntiBotConfig storage config,\\r\\n        uint256 _maxTxAmount,\\r\\n        uint256 _maxWalletAmount\\r\\n    ) internal {\\r\\n        config.enabled = false; // Start disabled by default\\r\\n        config.maxTxAmount = _maxTxAmount;\\r\\n        config.maxWalletAmount = _maxWalletAmount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Applies simplified anti-bot checks\\r\\n     */\\r\\n    function applyAntiBotLimits(\\r\\n        AntiBotConfig storage config,\\r\\n        address tokenAddress,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 recipientBalance,\\r\\n        uint256 launchTime,\\r\\n        uint256 launchBlock\\r\\n    ) internal view {\\r\\n        // Only apply limits if enabled\\r\\n        if (!config.enabled) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        // Basic transaction amount limit\\r\\n        require(amount <= config.maxTxAmount, \\\"Transfer exceeds transaction limit\\\");\\r\\n        \\r\\n        // Basic wallet balance limit\\r\\n        require(recipientBalance + amount <= config.maxWalletAmount, \\\"Transfer exceeds wallet limit\\\");\\r\\n    }\\r\\n\\r\\n    function blacklistAddress(AntiBotConfig storage config, address account) internal {\\r\\n        config.blacklisted[account] = true;\\r\\n    }\\r\\n    \\r\\n    function removeFromBlacklist(AntiBotConfig storage config, address account) internal {\\r\\n        config.blacklisted[account] = false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x10426bbf0c9b34348486c23baec42967e4ef42f68660a99259e2036e7197cb91\",\"license\":\"MIT\"},\"contracts/utils/SecurityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SecurityUtils\\r\\n * @dev Simplified security utility functions for token contracts\\r\\n */\\r\\nlibrary SecurityUtils {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev Struct to store contract security settings\\r\\n     */\\r\\n    struct SecuritySettings {\\r\\n        bool pausable;\\r\\n        bool paused;\\r\\n        bool blockContractsByDefault;\\r\\n        mapping(address => bool) blockedContracts;\\r\\n        mapping(address => bool) trustedContracts;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Initializes security settings with minimal defaults\\r\\n     * @param settings Security settings storage pointer\\r\\n     */\\r\\n    function initialize(SecuritySettings storage settings) internal {\\r\\n        settings.pausable = true;\\r\\n        settings.paused = false; // Start unpaused by default\\r\\n        settings.blockContractsByDefault = false;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Simplified security check that only blocks explicitly blacklisted contracts\\r\\n     * @param settings Security settings storage pointer\\r\\n     * @param from Sender address\\r\\n     * @param to Recipient address\\r\\n     * @return bool Whether the transfer passes security checks\\r\\n     */\\r\\n    function isSecureTransfer(\\r\\n        SecuritySettings storage settings,\\r\\n        address from,\\r\\n        address to\\r\\n    ) internal view returns (bool) {\\r\\n        // Only block if explicitly paused\\r\\n        if (settings.pausable && settings.paused) {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        // Only block explicitly blacklisted contracts\\r\\n        if (isContract(from) && settings.blockedContracts[from]) {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        // Allow all other transfers\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Checks if an address is a contract\\r\\n     * @param addr Address to check\\r\\n     * @return bool Whether the address is a contract\\r\\n     */\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        return addr.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validates an address is not zero address\\r\\n     * @param addr Address to validate\\r\\n     * @return bool Whether the address is valid\\r\\n     */\\r\\n    function isValidAddress(address addr) internal pure returns (bool) {\\r\\n        return addr != address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Sets a contract as trusted or blocked\\r\\n     * @param settings Security settings storage pointer\\r\\n     * @param contractAddr Contract address\\r\\n     * @param trusted Whether the contract should be trusted\\r\\n     * @param blocked Whether the contract should be blocked\\r\\n     */\\r\\n    function setContractStatus(\\r\\n        SecuritySettings storage settings,\\r\\n        address contractAddr,\\r\\n        bool trusted,\\r\\n        bool blocked\\r\\n    ) internal {\\r\\n        require(isContract(contractAddr), \\\"Address is not a contract\\\");\\r\\n        settings.trustedContracts[contractAddr] = trusted;\\r\\n        settings.blockedContracts[contractAddr] = blocked;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Toggles the paused state\\r\\n     * @param settings Security settings storage pointer\\r\\n     * @param paused Whether the contract should be paused\\r\\n     */\\r\\n    function setPaused(SecuritySettings storage settings, bool paused) internal {\\r\\n        require(settings.pausable, \\\"Contract is not pausable\\\");\\r\\n        settings.paused = paused;\\r\\n    }\\r\\n\\r\\n    function setBlockContractsByDefault(\\r\\n        SecuritySettings storage settings,\\r\\n        bool blocked\\r\\n    ) internal {\\r\\n        settings.blockContractsByDefault = blocked;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7a58c13428c04efa62fe780a5213b90c60a2d7a935322c4258118d6770c6f498\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620006b75762001d7f803803806200001d8162000708565b92833981019061020081830312620006b75780516001600160401b038111620006b757826200004e9183016200072e565b60208201519092906001600160401b038111620006b75781620000739184016200072e565b9260408301519260ff84168403620006b7576060810151906200009960808201620007a0565b948460bf83011215620006b757620000b0620006e8565b968795610120840198818a11620006b75760a08501905b8a8210620006cd5750508061013f85011215620006b757620000e8620006e8565b80996101a08601928311620006b757905b828210620006bc5750505180151503620006b7576101c08301516101e090930151855190956001600160401b038211620005865760035490600182811c92168015620006ac575b6020831014620005655781601f84931162000637575b50602090601f8311600114620005a8576000926200059c575b50508160011b916000199060031b1c1916176003555b8051906001600160401b038211620005865760045490600182811c921680156200057b575b6020831014620005655781601f849311620004f3575b50602090601f831160011462000468576000926200045c575b50508160011b916000199060031b1c1916176004555b6001600160a01b0395861680156200044357600580546001600160a01b03198116831790915587167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600162ffffff19600d541617600d55604d60ff821611620003a95760ff16600a0a938483029683159584890414861715620003a95733159788620003fb57620002869033620007dd565b60ff1997886008541660085560005b6004811062000378575050505060018660085416176008557e91797718383457eafcb8600ff903ce41cd8e28b20bc5a8df996532910b85dd600080a160008115620003595750925b60009083156200032457505050905b8360095416600955600a55600b556005541660005260106020526001604060002091825416179055604051611108908162000c578239f35b909192506014830292830460141417156200034557506064900490620002ec565b634e487b7160e01b81526011600452602490fd5b600a8381029250838304148517156200034557506064900492620002dd565b88620003858286620007b5565b51161515806200042d575b620003bf575b6000198114620003a95760010162000295565b634e487b7160e01b600052601160045260246000fd5b88620003cc8286620007b5565b511682620003db8386620007b5565b519062000414578115620003fb57620003f5913362000963565b62000396565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b506200043a8184620007b5565b51151562000390565b604051631e4fbdf760e01b815260006004820152602490fd5b015190503880620001d9565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b818110620004da5750908460019594939210620004c0575b505050811b01600455620001ef565b015160001960f88460031b161c19169055388080620004b1565b9293602060018192878601518155019501930162000499565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101602085106200055d575b90849392915b601f830160051c820181106200054d575050620001c0565b6000815585945060010162000535565b50806200052f565b634e487b7160e01b600052602260045260246000fd5b91607f1691620001aa565b634e487b7160e01b600052604160045260246000fd5b0151905038806200016f565b6003600090815293507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91905b601f19841685106200061b576001945083601f1981161062000601575b505050811b0160035562000185565b015160001960f88460031b161c19169055388080620005f2565b81810151835560209485019460019093019290910190620005d5565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c81019160208510620006a1575b90601f859493920160051c01905b81811062000691575062000156565b6000815584935060010162000682565b909150819062000674565b91607f169162000140565b600080fd5b8151815260209182019101620000f9565b60208091620006dc84620007a0565b815201910190620000c7565b60405190608082016001600160401b038111838210176200058657604052565b6040519190601f01601f191682016001600160401b038111838210176200058657604052565b919080601f84011215620006b75782516001600160401b038111620005865760209062000764601f8201601f1916830162000708565b92818452828287010111620006b75760005b8181106200078c57508260009394955001015290565b858101830151848201840152820162000776565b51906001600160a01b0382168203620006b757565b906004811015620007c75760051b0190565b634e487b7160e01b600052603260045260246000fd5b6005546001600160a01b039291908316801590811562000956575b50801562000921575b801562000906575b8015620008f8575b620008ec5760ff600d5460081c16620008b45760ff60055460a01c16156200086f576200084b9260ff600954166200084d575b5062000a63565b565b81166000526000602052620008686040600020548362000b91565b3862000844565b60405162461bcd60e51b815260206004820152601360248201527f54726164696e67206e6f7420656e61626c6564000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f151c985b9cd9995c9cc81c185d5cd95960821b6044820152606490fd5b6200084b925062000a63565b5060ff600854161562000811565b50828116600052601060205260ff6040600020541662000809565b506000805260106020527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb015460ff1662000801565b90508382161438620007f8565b6005546001600160a01b0393929190841681851681811491821562000a48575b50811562000a2e575b50801562000a13575b801562000a05575b620009f95760ff600d5460081c16620008b45760ff60055460a01c16156200086f576200084b9360ff60095416620009d7575b5062000ac4565b82166000526000602052620009f26040600020548462000b91565b38620009d0565b6200084b935062000ac4565b5060ff60085416156200099d565b50838216600052601060205260ff6040600020541662000995565b9050600052601060205260ff60406000205416386200098c565b8487161491503862000983565b91908201809211620003a957565b60008051602062001d5f833981519152602060009262000a868560025462000a55565b6002556001600160a01b0316938415841462000aae5780600254036002555b604051908152a3565b8484528382526040842081815401905562000aa5565b6001600160a01b03908116918262000b2e5760008051602062001d5f8339815191529160209162000af88660025462000a55565b6002555b16938462000b15578060025403600255604051908152a3565b8460005260008252604060002081815401905562000aa5565b600083815280602052604081205485811062000b6d5791816040876020958860008051602062001d5f8339815191529896528387520391205562000afc565b84866064926040519263391434e360e21b8452600484015260248301526044820152fd5b60ff600954161562000c5257600a54811162000c025762000bb29162000a55565b600b541062000bbd57565b60405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220657863656564732077616c6c6574206c696d69740000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f5472616e736665722065786365656473207472616e73616374696f6e206c696d6044820152611a5d60f21b6064820152608490fd5b505056fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610b9157508063087c801e14610aaa578063095ea7b314610a0157806318160ddd146109e257806321cd0c401461096457806323b872dd1461087157806327a14fc214610806578063313ce567146107ea5780634ada218b146107c35780635cce86cd1461078557806370a082311461074e578063715018a6146106ee578063790ca413146106cf57806382e77033146105d15780638a8c523c1461051d5780638da5cb5b146104f457806395d89b41146103d4578063a9059cbb146103a3578063bc6e6830146102ec578063c0a904a214610297578063d00efb2f14610278578063dd62ed3e1461022b578063ec28438a146101bd5763f2fde38b1461012b57600080fd5b346101b95760203660031901126101b957610144610ccf565b9061014d610d1e565b6001600160a01b039182169283156101a3575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5090346101b95760203660031901126101b9577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a9135906101fc610d1e565b600a829055600954600b54915160ff909116151581526020810192909252604082015280606081015b0390a180f35b50503461027457806003193601126102745780602092610249610ccf565b610251610cea565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346102745781600319360112610274576020906007549051908152f35b5050346102745780600319360112610274576102e9906102b5610ccf565b906102be610d0f565b916102c7610d1e565b60018060a01b03168452601060205283209060ff801983541691151516179055565b80f35b5090346101b95760203660031901126101b957610307610d00565b61030f610d1e565b600d549260ff8416156103605750916020917fd4ba2862d83da5f401c3329c66575d96bbe491e12fbce1ab1749180968e7a9289315159161ff008360081b169061ff00191617600d5551908152a180f35b606490602084519162461bcd60e51b8352820152601860248201527f436f6e7472616374206973206e6f74207061757361626c6500000000000000006044820152fd5b5050346102745780600319360112610274576020906103cd6103c3610ccf565b6024359033610d4a565b5160018152f35b50919034610274578160031936011261027457805190828454600181811c908083169283156104ea575b60209384841081146104d7578388529081156104bb5750600114610466575b505050829003601f01601f191682019267ffffffffffffffff841183851017610453575082918261044f925282610c86565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106104a7575050505083010138808061041d565b805488860183015293019284908201610491565b60ff1916878501525050151560051b840101905038808061041d565b634e487b7160e01b895260228a52602489fd5b91607f16916103fe565b50503461027457816003193601126102745760055490516001600160a01b039091168152602090f35b50346101b957826003193601126101b957610536610d1e565b6005549060ff8260a01c1661058e575060ff60a01b1916600160a01b176005554260068190554360075590519081527fb3da2db3dfc3778f99852546c6e9ab39ec253f9de7b0847afec61bd27878e92390602090a180f35b606490602084519162461bcd60e51b8352820152601760248201527f54726164696e6720616c726561647920656e61626c65640000000000000000006044820152fd5b50829034610274576060366003190112610274576105ed610ccf565b926105f6610d0f565b60443592831515908185036106cb5761060d610d1e565b863b1561068c57506001600160a01b0395909516808552600f602052828520805460ff191660ff8415151617905593947ff09ba3be2b2384879395cf65ff434b177b3810bbb1829bd988a3c821064086559361067c90600e6020528488209060ff801983541691151516179055565b825191151582526020820152a280f35b606490602085519162461bcd60e51b835282015260196024820152781059191c995cdcc81a5cc81b9bdd08184818dbdb9d1c9858dd603a1b6044820152fd5b8580fd5b5050346102745781600319360112610274576020906006549051908152f35b833461074b578060031936011261074b57610707610d1e565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346102745760203660031901126102745760209181906001600160a01b03610776610ccf565b16815280845220549051908152f35b5050346102745760203660031901126102745760209160ff9082906001600160a01b036107b0610ccf565b1681526010855220541690519015158152f35b50503461027457816003193601126102745760209060ff60055460a01c1690519015158152f35b5050346102745781600319360112610274576020905160128152f35b5090346101b95760203660031901126101b9577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a9135610844610d1e565b600b819055600954600a54925160ff90911615158152602081019290925260408201528060608101610225565b50823461074b57606036600319011261074b5761088c610ccf565b610894610cea565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983106108d0575b6020886103cd898989610d4a565b86831061093857811561092157331561090a575082526001602090815286832033845281529186902090859003905582906103cd876108c2565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b505034610274576020366003190112610274577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a906109a1610d00565b6109a9610d1e565b60ff196009541660ff8215151617600955610225600a5492600b5490519384938460409194939260608201951515825260208201520152565b5050346102745781600319360112610274576020906002549051908152f35b50346101b957816003193601126101b957610a1a610ccf565b602435903315610a93576001600160a01b0316918215610a7c57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b5090346101b957602080600319360112610b8d57610ac6610ccf565b610ace610d1e565b6001600160a01b03811680865260108352838620805460ff19908116600117909155909490913b15610b4e5750907ff09ba3be2b2384879395cf65ff434b177b3810bbb1829bd988a3c821064086559291848652600f8252828620600182825416179055600e82528286209081541690558482519160018352820152a280f35b835162461bcd60e51b815290810183905260196024820152781059191c995cdcc81a5cc81b9bdd08184818dbdb9d1c9858dd603a1b6044820152606490fd5b8380fd5b84915083346101b957826003193601126101b95782600354600181811c90808316928315610c7c575b60209384841081146104d757838852908115610c605750600114610c0a57505050829003601f01601f191682019267ffffffffffffffff841183851017610453575082918261044f925282610c86565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610c4c575050505083010185808061041d565b805488860183015293019284908201610c36565b60ff1916878501525050151560051b840101905085808061041d565b91607f1691610bba565b6020808252825181830181905290939260005b828110610cbb57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610c99565b600435906001600160a01b0382168203610ce557565b600080fd5b602435906001600160a01b0382168203610ce557565b600435908115158203610ce557565b602435908115158203610ce557565b6005546001600160a01b03163303610d3257565b60405163118cdaa760e01b8152336004820152602490fd5b91906001600160a01b0380841615610d8757811615610d6e57610d6c92610da0565b565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6005546001600160a01b03939291908416818516818114918215610ee6575b508115610ecd575b508015610eb3575b8015610ea6575b610e9c5760ff600d5460081c16610e645760ff60055460a01c1615610e2957610d6c9360ff60095416610e0a575b50610f15565b82166000526000602052610e2360406000205484611012565b38610e04565b60405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f151c985b9cd9995c9cc81c185d5cd95960821b6044820152606490fd5b610d6c9350610f15565b5060ff6008541615610dd6565b50838216600052601060205260ff60406000205416610dcf565b9050600052601060205260ff6040600020541638610dc7565b84871614915038610dbf565b91908201809211610eff57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0380821692909183610f8f57507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091610f5a86600254610ef2565b6002555b169384610f775780600254036002555b604051908152a3565b84600052600082526040600020818154019055610f6e565b60009084825281602052604082205490868210610fe057509181604087602095887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef98965283875203912055610f5e565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101869052606490fd5b60ff60095416156110ce57600a54811161107e5761102f91610ef2565b600b541061103957565b60405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220657863656564732077616c6c6574206c696d69740000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f5472616e736665722065786365656473207472616e73616374696f6e206c696d6044820152611a5d60f21b6064820152608490fd5b505056fea2646970667358221220444f7c9b453ef3785ad0103764fc83582cf3f1490dee77a3ab74c14cf8f3669764736f6c63430008140033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610b9157508063087c801e14610aaa578063095ea7b314610a0157806318160ddd146109e257806321cd0c401461096457806323b872dd1461087157806327a14fc214610806578063313ce567146107ea5780634ada218b146107c35780635cce86cd1461078557806370a082311461074e578063715018a6146106ee578063790ca413146106cf57806382e77033146105d15780638a8c523c1461051d5780638da5cb5b146104f457806395d89b41146103d4578063a9059cbb146103a3578063bc6e6830146102ec578063c0a904a214610297578063d00efb2f14610278578063dd62ed3e1461022b578063ec28438a146101bd5763f2fde38b1461012b57600080fd5b346101b95760203660031901126101b957610144610ccf565b9061014d610d1e565b6001600160a01b039182169283156101a3575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5090346101b95760203660031901126101b9577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a9135906101fc610d1e565b600a829055600954600b54915160ff909116151581526020810192909252604082015280606081015b0390a180f35b50503461027457806003193601126102745780602092610249610ccf565b610251610cea565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346102745781600319360112610274576020906007549051908152f35b5050346102745780600319360112610274576102e9906102b5610ccf565b906102be610d0f565b916102c7610d1e565b60018060a01b03168452601060205283209060ff801983541691151516179055565b80f35b5090346101b95760203660031901126101b957610307610d00565b61030f610d1e565b600d549260ff8416156103605750916020917fd4ba2862d83da5f401c3329c66575d96bbe491e12fbce1ab1749180968e7a9289315159161ff008360081b169061ff00191617600d5551908152a180f35b606490602084519162461bcd60e51b8352820152601860248201527f436f6e7472616374206973206e6f74207061757361626c6500000000000000006044820152fd5b5050346102745780600319360112610274576020906103cd6103c3610ccf565b6024359033610d4a565b5160018152f35b50919034610274578160031936011261027457805190828454600181811c908083169283156104ea575b60209384841081146104d7578388529081156104bb5750600114610466575b505050829003601f01601f191682019267ffffffffffffffff841183851017610453575082918261044f925282610c86565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106104a7575050505083010138808061041d565b805488860183015293019284908201610491565b60ff1916878501525050151560051b840101905038808061041d565b634e487b7160e01b895260228a52602489fd5b91607f16916103fe565b50503461027457816003193601126102745760055490516001600160a01b039091168152602090f35b50346101b957826003193601126101b957610536610d1e565b6005549060ff8260a01c1661058e575060ff60a01b1916600160a01b176005554260068190554360075590519081527fb3da2db3dfc3778f99852546c6e9ab39ec253f9de7b0847afec61bd27878e92390602090a180f35b606490602084519162461bcd60e51b8352820152601760248201527f54726164696e6720616c726561647920656e61626c65640000000000000000006044820152fd5b50829034610274576060366003190112610274576105ed610ccf565b926105f6610d0f565b60443592831515908185036106cb5761060d610d1e565b863b1561068c57506001600160a01b0395909516808552600f602052828520805460ff191660ff8415151617905593947ff09ba3be2b2384879395cf65ff434b177b3810bbb1829bd988a3c821064086559361067c90600e6020528488209060ff801983541691151516179055565b825191151582526020820152a280f35b606490602085519162461bcd60e51b835282015260196024820152781059191c995cdcc81a5cc81b9bdd08184818dbdb9d1c9858dd603a1b6044820152fd5b8580fd5b5050346102745781600319360112610274576020906006549051908152f35b833461074b578060031936011261074b57610707610d1e565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346102745760203660031901126102745760209181906001600160a01b03610776610ccf565b16815280845220549051908152f35b5050346102745760203660031901126102745760209160ff9082906001600160a01b036107b0610ccf565b1681526010855220541690519015158152f35b50503461027457816003193601126102745760209060ff60055460a01c1690519015158152f35b5050346102745781600319360112610274576020905160128152f35b5090346101b95760203660031901126101b9577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a9135610844610d1e565b600b819055600954600a54925160ff90911615158152602081019290925260408201528060608101610225565b50823461074b57606036600319011261074b5761088c610ccf565b610894610cea565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983106108d0575b6020886103cd898989610d4a565b86831061093857811561092157331561090a575082526001602090815286832033845281529186902090859003905582906103cd876108c2565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b505034610274576020366003190112610274577fc9ffa505747a3c108090b40659cba1242a299c3d8d627a8011ba3563b270692a906109a1610d00565b6109a9610d1e565b60ff196009541660ff8215151617600955610225600a5492600b5490519384938460409194939260608201951515825260208201520152565b5050346102745781600319360112610274576020906002549051908152f35b50346101b957816003193601126101b957610a1a610ccf565b602435903315610a93576001600160a01b0316918215610a7c57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b5090346101b957602080600319360112610b8d57610ac6610ccf565b610ace610d1e565b6001600160a01b03811680865260108352838620805460ff19908116600117909155909490913b15610b4e5750907ff09ba3be2b2384879395cf65ff434b177b3810bbb1829bd988a3c821064086559291848652600f8252828620600182825416179055600e82528286209081541690558482519160018352820152a280f35b835162461bcd60e51b815290810183905260196024820152781059191c995cdcc81a5cc81b9bdd08184818dbdb9d1c9858dd603a1b6044820152606490fd5b8380fd5b84915083346101b957826003193601126101b95782600354600181811c90808316928315610c7c575b60209384841081146104d757838852908115610c605750600114610c0a57505050829003601f01601f191682019267ffffffffffffffff841183851017610453575082918261044f925282610c86565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610c4c575050505083010185808061041d565b805488860183015293019284908201610c36565b60ff1916878501525050151560051b840101905085808061041d565b91607f1691610bba565b6020808252825181830181905290939260005b828110610cbb57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610c99565b600435906001600160a01b0382168203610ce557565b600080fd5b602435906001600160a01b0382168203610ce557565b600435908115158203610ce557565b602435908115158203610ce557565b6005546001600160a01b03163303610d3257565b60405163118cdaa760e01b8152336004820152602490fd5b91906001600160a01b0380841615610d8757811615610d6e57610d6c92610da0565b565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6005546001600160a01b03939291908416818516818114918215610ee6575b508115610ecd575b508015610eb3575b8015610ea6575b610e9c5760ff600d5460081c16610e645760ff60055460a01c1615610e2957610d6c9360ff60095416610e0a575b50610f15565b82166000526000602052610e2360406000205484611012565b38610e04565b60405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f151c985b9cd9995c9cc81c185d5cd95960821b6044820152606490fd5b610d6c9350610f15565b5060ff6008541615610dd6565b50838216600052601060205260ff60406000205416610dcf565b9050600052601060205260ff6040600020541638610dc7565b84871614915038610dbf565b91908201809211610eff57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0380821692909183610f8f57507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091610f5a86600254610ef2565b6002555b169384610f775780600254036002555b604051908152a3565b84600052600082526040600020818154019055610f6e565b60009084825281602052604082205490868210610fe057509181604087602095887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef98965283875203912055610f5e565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101869052606490fd5b60ff60095416156110ce57600a54811161107e5761102f91610ef2565b600b541061103957565b60405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220657863656564732077616c6c6574206c696d69740000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f5472616e736665722065786365656473207472616e73616374696f6e206c696d6044820152611a5d60f21b6064820152608490fd5b505056fea2646970667358221220444f7c9b453ef3785ad0103764fc83582cf3f1490dee77a3ab74c14cf8f3669764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 307,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 313,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 315,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 317,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1810,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "tradingEnabled",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1812,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "launchTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1814,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "launchBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1816,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_initialDistributionComplete",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1819,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_antiBotConfig",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(AntiBotConfig)2277_storage"
      },
      {
        "astId": 1822,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "_securitySettings",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(SecuritySettings)3216_storage"
      },
      {
        "astId": 1826,
        "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
        "label": "isExcludedFromLimits",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AntiBotConfig)2277_storage": {
        "encoding": "inplace",
        "label": "struct AntiBot.AntiBotConfig",
        "members": [
          {
            "astId": 2268,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2270,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "maxTxAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2272,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "maxWalletAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2276,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "blacklisted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SecuritySettings)3216_storage": {
        "encoding": "inplace",
        "label": "struct SecurityUtils.SecuritySettings",
        "members": [
          {
            "astId": 3203,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "pausable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3205,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "paused",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3207,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "blockContractsByDefault",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3211,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "blockedContracts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3215,
            "contract": "contracts/core/TokenTemplate.sol:TokenTemplate",
            "label": "trustedContracts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}