{
  "address": "0xbC53a05dBEB2c73c4b29822427372df11bc333C4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "LiquidityCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "LiquidityLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "createLiquidityPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8384a32de58eaabca18a702b8393f3e4bef692b5943c71c1a72c2d879e3f21f8",
  "receipt": {
    "to": null,
    "from": "0xae6009Dd36eBBE2d36DBEBA64004e31517Cc48BB",
    "contractAddress": "0xbC53a05dBEB2c73c4b29822427372df11bc333C4",
    "transactionIndex": 64,
    "gasUsed": "1124393",
    "logsBloom": "0x
    "blockHash": "0xb88ca8fff210108c68921b4556d592fc5f93b3ec8c2ae68a1a8b9055659819a5",
    "transactionHash": "0x8384a32de58eaabca18a702b8393f3e4bef692b5943c71c1a72c2d879e3f21f8",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 8089429,
        "transactionHash": "0x8384a32de58eaabca18a702b8393f3e4bef692b5943c71c1a72c2d879e3f21f8",
        "address": "0xbC53a05dBEB2c73c4b29822427372df11bc333C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0xb88ca8fff210108c68921b4556d592fc5f93b3ec8c2ae68a1a8b9055659819a5"
      }
    ],
    "blockNumber": 8089429,
    "cumulativeGasUsed": "5926099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1238536071E1c677A632429e3655c799b22cDA52",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 17,
  "solcInputHash": "c11cd53444cfd95bc502582c6c006e76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"LiquidityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLiquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/LiquidityManager.sol\":\"LiquidityManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/extensions/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint) external;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Factory {\\r\\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n    \\r\\n    function factory() external view returns (address);\\r\\n    function createAndInitializePoolIfNecessary(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        uint160 sqrtPriceX96\\r\\n    ) external payable returns (address pool);\\r\\n    \\r\\n    function mint(MintParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n        \\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ncontract LiquidityManager is Ownable {\\r\\n    // State variables\\r\\n    INonfungiblePositionManager public immutable positionManager;\\r\\n    IWETH public immutable weth;\\r\\n    \\r\\n    struct LockInfo {\\r\\n        uint256 tokenId;\\r\\n        uint256 unlockTime;\\r\\n    }\\r\\n    \\r\\n    // Memory structs for temporary variables\\r\\n    struct PoolCreationVars {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        address pool;\\r\\n        uint256 tokenId;\\r\\n        bool isToken0Weth;\\r\\n        bool isToken1Weth;\\r\\n    }\\r\\n    \\r\\n    // Memory struct for pool initialization variables\\r\\n    struct PoolInitVars {\\r\\n        uint8 token0Decimals;\\r\\n        uint8 token1Decimals;\\r\\n        uint160 sqrtPriceX96;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => LockInfo) public liquidityLocks;\\r\\n    mapping(uint256 => address) public lockerOf;\\r\\n    \\r\\n    event LiquidityCreated(address token0, address token1, uint256 tokenId, uint256 multiplier);\\r\\n    event LiquidityLocked(uint256 tokenId, uint256 unlockTime);\\r\\n    \\r\\n    constructor(address _positionManager, address _weth) Ownable(msg.sender) {\\r\\n        positionManager = INonfungiblePositionManager(_positionManager);\\r\\n        weth = IWETH(_weth);\\r\\n    }\\r\\n    \\r\\n    // Main function broken into smaller functions to avoid stack too deep\\r\\n    function createLiquidityPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 lockDuration\\r\\n    ) external payable returns (uint256 tokenId) {\\r\\n        // Create memory struct for temporary variables\\r\\n        PoolCreationVars memory vars = PoolCreationVars({\\r\\n            token0: address(0),\\r\\n            token1: address(0),\\r\\n            amount0Desired: 0,\\r\\n            amount1Desired: 0,\\r\\n            pool: address(0),\\r\\n            tokenId: 0,\\r\\n            isToken0Weth: false,\\r\\n            isToken1Weth: false\\r\\n        });\\r\\n        \\r\\n        // Step 1: Sort tokens and handle ETH conversion\\r\\n        _prepareTokensAndAmounts(vars, tokenA, tokenB, amountA, amountB);\\r\\n        \\r\\n        // Step 2: Initialize pool if needed\\r\\n        _initializePoolIfNeeded(vars, fee);\\r\\n        \\r\\n        // Step 3: Transfer tokens to this contract and approve for position manager\\r\\n        _transferAndApproveTokens(vars);\\r\\n        \\r\\n        // Step 4: Create the position\\r\\n        vars.tokenId = _mintPosition(vars, fee, tickLower, tickUpper);\\r\\n        \\r\\n        // Step 5: Handle locking if needed\\r\\n        _handleLocking(vars.tokenId, lockDuration);\\r\\n        \\r\\n        return vars.tokenId;\\r\\n    }\\r\\n    \\r\\n    // Helper function 1: Sort tokens and prepare amounts - using memory\\r\\n    function _prepareTokensAndAmounts(\\r\\n        PoolCreationVars memory vars,\\r\\n        address tokenA, \\r\\n        address tokenB, \\r\\n        uint256 amountA, \\r\\n        uint256 amountB\\r\\n    ) private {\\r\\n        // Handle ETH conversion if needed\\r\\n        if (msg.value > 0) {\\r\\n            require(tokenA == address(weth) || tokenB == address(weth), \\\"ETH only for WETH pairs\\\");\\r\\n            weth.deposit{value: msg.value}();\\r\\n            \\r\\n            // Adjust amounts if we received more ETH than needed\\r\\n            if (tokenA == address(weth) && msg.value > amountA) {\\r\\n                amountA = msg.value;\\r\\n            }\\r\\n            if (tokenB == address(weth) && msg.value > amountB) {\\r\\n                amountB = msg.value;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Determine token order and store in memory struct\\r\\n        if (tokenA < tokenB) {\\r\\n            vars.token0 = tokenA;\\r\\n            vars.token1 = tokenB;\\r\\n            vars.isToken0Weth = (tokenA == address(weth));\\r\\n            vars.isToken1Weth = (tokenB == address(weth));\\r\\n        } else {\\r\\n            vars.token0 = tokenB;\\r\\n            vars.token1 = tokenA;\\r\\n            vars.isToken0Weth = (tokenB == address(weth));\\r\\n            vars.isToken1Weth = (tokenA == address(weth));\\r\\n        }\\r\\n        \\r\\n        // Set amounts based on token order\\r\\n        if (vars.token0 == tokenA) {\\r\\n            vars.amount0Desired = amountA;\\r\\n            vars.amount1Desired = amountB;\\r\\n        } else {\\r\\n            vars.amount0Desired = amountB;\\r\\n            vars.amount1Desired = amountA;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function 2: Initialize pool if needed - using memory\\r\\n    function _initializePoolIfNeeded(PoolCreationVars memory vars, uint24 fee) private {\\r\\n        vars.pool = IUniswapV3Factory(positionManager.factory()).getPool(\\r\\n            vars.token0, \\r\\n            vars.token1, \\r\\n            fee\\r\\n        );\\r\\n        \\r\\n        if (vars.pool == address(0)) {\\r\\n            // Create memory struct for pool initialization variables\\r\\n            PoolInitVars memory initVars = PoolInitVars({\\r\\n                token0Decimals: 0,\\r\\n                token1Decimals: 0,\\r\\n                sqrtPriceX96: 0\\r\\n            });\\r\\n            \\r\\n            // Get token decimals\\r\\n            initVars.token0Decimals = IERC20Metadata(vars.token0).decimals();\\r\\n            initVars.token1Decimals = IERC20Metadata(vars.token1).decimals();\\r\\n            \\r\\n            // Calculate sqrtPriceX96 based on token decimals\\r\\n            _calculateSqrtPrice(initVars);\\r\\n            \\r\\n            // Create and initialize the pool\\r\\n            positionManager.createAndInitializePoolIfNecessary(\\r\\n                vars.token0,\\r\\n                vars.token1,\\r\\n                fee,\\r\\n                initVars.sqrtPriceX96\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // UPDATED: Transfer tokens to this contract first, then approve Position Manager\\r\\n    function _transferAndApproveTokens(PoolCreationVars memory vars) private {\\r\\n        // For token0: If not WETH or if no ETH was sent, transfer from user\\r\\n        if (!vars.isToken0Weth || msg.value == 0) {\\r\\n            // Transfer token0 from sender to this contract\\r\\n            require(\\r\\n                IERC20(vars.token0).transfer(address(this), vars.amount0Desired),\\r\\n                \\\"Transfer of token0 failed\\\"\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // For token1: If not WETH or if no ETH was sent, transfer from user\\r\\n        if (!vars.isToken1Weth || msg.value == 0) {\\r\\n            // Transfer token1 from sender to this contract\\r\\n            require(\\r\\n                IERC20(vars.token1).transfer(address(this), vars.amount1Desired),\\r\\n                \\\"Transfer of token1 failed\\\"\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // Now that tokens are in this contract, approve the position manager\\r\\n        IERC20(vars.token0).approve(address(positionManager), vars.amount0Desired);\\r\\n        IERC20(vars.token1).approve(address(positionManager), vars.amount1Desired);\\r\\n    }\\r\\n    \\r\\n    // Helper function to calculate sqrt price - reduces stack usage\\r\\n    function _calculateSqrtPrice(PoolInitVars memory initVars) private pure {\\r\\n        if (initVars.token0Decimals == initVars.token1Decimals) {\\r\\n            // 1:1 ratio (Q64.96 format)\\r\\n            initVars.sqrtPriceX96 = 79228162514264337593543950336; // 2^96\\r\\n        } else if (initVars.token0Decimals > initVars.token1Decimals) {\\r\\n            // Adjust for decimal difference\\r\\n            uint8 decimalDiff = initVars.token0Decimals - initVars.token1Decimals;\\r\\n            initVars.sqrtPriceX96 = uint160(79228162514264337593543950336 * 10**(decimalDiff / 2));\\r\\n        } else {\\r\\n            // Adjust for decimal difference\\r\\n            uint8 decimalDiff = initVars.token1Decimals - initVars.token0Decimals;\\r\\n            initVars.sqrtPriceX96 = uint160(79228162514264337593543950336 / 10**(decimalDiff / 2));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function 3: Mint the position - using memory\\r\\n    function _mintPosition(\\r\\n        PoolCreationVars memory vars,\\r\\n        uint24 fee,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper\\r\\n    ) private returns (uint256 tokenId) {\\r\\n        // Prepare mint params\\r\\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\\r\\n            token0: vars.token0,\\r\\n            token1: vars.token1,\\r\\n            fee: fee,\\r\\n            tickLower: tickLower,\\r\\n            tickUpper: tickUpper,\\r\\n            amount0Desired: vars.amount0Desired,\\r\\n            amount1Desired: vars.amount1Desired,\\r\\n            amount0Min: 0,  // Could set minimum amounts based on slippage tolerance\\r\\n            amount1Min: 0,  // Could set minimum amounts based on slippage tolerance\\r\\n            recipient: address(this),\\r\\n            deadline: block.timestamp + 300\\r\\n        });\\r\\n        \\r\\n        // Mint NFT representing liquidity position\\r\\n        (tokenId, , , ) = positionManager.mint(params);\\r\\n        \\r\\n        emit LiquidityCreated(vars.token0, vars.token1, tokenId, 1);\\r\\n        \\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    // Helper function 4: Handle locking\\r\\n    function _handleLocking(uint256 tokenId, uint256 lockDuration) private {\\r\\n        // Lock liquidity if duration is specified\\r\\n        if (lockDuration > 0) {\\r\\n            liquidityLocks[tokenId] = LockInfo({\\r\\n                tokenId: tokenId,\\r\\n                unlockTime: block.timestamp + lockDuration\\r\\n            });\\r\\n            lockerOf[tokenId] = msg.sender;\\r\\n            \\r\\n            emit LiquidityLocked(tokenId, block.timestamp + lockDuration);\\r\\n        } else {\\r\\n            // Transfer NFT back to sender\\r\\n            positionManager.transferFrom(address(this), msg.sender, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function to unlock liquidity after the lock duration\\r\\n    function unlockLiquidity(uint256 tokenId) external {\\r\\n        LockInfo storage lockInfo = liquidityLocks[tokenId];\\r\\n        require(lockInfo.unlockTime > 0, \\\"Liquidity not locked\\\");\\r\\n        require(block.timestamp >= lockInfo.unlockTime, \\\"Liquidity still locked\\\");\\r\\n        require(lockerOf[tokenId] == msg.sender, \\\"Not the locker\\\");\\r\\n        \\r\\n        // Transfer NFT back to sender\\r\\n        positionManager.transferFrom(address(this), msg.sender, tokenId);\\r\\n        \\r\\n        // Clear lock info\\r\\n        delete liquidityLocks[tokenId];\\r\\n        delete lockerOf[tokenId];\\r\\n    }\\r\\n    \\r\\n    // Handle received ETH\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0xdbee24dc3db132e35713a2a73a7cd57136d1344df3286e2ccb058f589a1219ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461015057601f61146b38819003918201601f19168301916001600160401b0383118484101761015557808492604094855283398101031261015057610052602061004b8361016b565b920161016b565b9033156101375760008054336001600160a01b0319821681178355604051946001600160a01b0394909385939192918416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3166080521660a0526112eb9081610180823960805181818161019d0152818161033e0152818161055001528181610635015281816106a10152818161083e01528181610994015281816109f30152610d91015260a0518181816103dd015281816104ef01528181610f5b01528181610f9e01528181610fd0015281816110130152818161106101526111260152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101505756fe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163121cba191461116e57508063308badfc1461040c5780633fc8cef3146103c7578063715018a61461036d578063791b98bc146103285780638da5cb5b1461030157806396e839241461014a578063a76e05f8146101165763f2fde38b0361000f5734610113576020366003190112610113576100a26111a0565b6100aa6111bb565b6001600160a01b039081169081156100fa57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b5034610113576020366003190112610113576040809160043581526001602052206001815491015482519182526020820152f35b50346101135760208060031936011261024e576004359081835260018152600160408420015480156102c5574210610288578183526002815260408320546001600160a01b0390811633036102525783907f000000000000000000000000000000000000000000000000000000000000000016803b1561024e576040516323b872dd60e01b8152306004820152336024820152604481018590529082908290606490829084905af180156102435761022b575b5091600292526001815282600160408220828155015552604081206001600160601b0360a01b815416905580f35b610234906111e7565b61023f5782386101fd565b8280fd5b6040513d84823e3d90fd5b5080fd5b60405162461bcd60e51b815260048101839052600e60248201526d2737ba103a3432903637b1b5b2b960911b6044820152606490fd5b6064906040519062461bcd60e51b825260048201526016602482015275131a5c5d5a591a5d1e481cdd1a5b1b081b1bd8dad95960521b6044820152fd5b60405162461bcd60e51b8152600481018390526014602482015273131a5c5d5a591a5d1e481b9bdd081b1bd8dad95960621b6044820152606490fd5b5034610113578060031936011261011357546040516001600160a01b039091168152602090f35b50346101135780600319360112610113576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101135780600319360112610113576103866111bb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101135780600319360112610113576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50610100366003190112610113576104226111a0565b6024356001600160a01b038116810361023f5760443562ffffff8116810361116a57606435928360020b840361116657608435908160020b820361116257604051938461010081011067ffffffffffffffff6101008701111761114e5761010085016040528685528660208601528660408601528660608601528660808601528660a08601528660c08601528660e086015260a4359060c4359234610f91575b6001600160a01b0390811691908116821015610f44578187526001600160a01b03908116602088018190527f000000000000000000000000000000000000000000000000000000000000000090911680831460c08901521460e08701525b85516001600160a01b031603610f3457604085015260608401525b60405163c45a015560e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610ae0578691610f15575b508351602085810151604051630b4c774160e11b81526001600160a01b039384166004820152908316602482015262ffffff8616604482015292909183916064918391165afa908115610ae0578691610ef6575b506001600160a01b03166080840181905215610c7e575b60c0830151158015610c76575b610bc5575b60e0830151158015610bbd575b610b0a575b8251604080850151905163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482019290925291602091839160449183918b91165af18015610ae057610aeb575b50602083810151606085015160405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201929092529291839160449183918b91165af18015610ae057610ab1575b5082516020840151604085015160608601516001600160a01b03928316979095919493909216904261012c810110610a9d57604051978861016081011067ffffffffffffffff6101608b0111176109785762ffffff926101608a016040528952602089015216604087015260020b606086015260020b608085015260a084015260c08301528260e0830152826101008301523061012083015261012c420161014083015261014060405192634418b22b60e11b845260018060a01b03815116600485015260018060a01b03602082015116602485015262ffffff6040820151166044850152606081015160020b6064850152608081015160020b608485015260a081015160a485015260c081015160c485015260e081015160e485015261010081015161010485015260018060a01b03610120820151166101248501520151610144830152608082610164818660018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1918215610a92578392610a40575b507fac214433e76e20d8f6190bc86fc9f445a27e707c7602379a095289b6cf423549608060018060a01b0383511660018060a01b03602085015116604051918252602082015284604082015260016060820152a160a0810182905260e43592831561098e576108dd84426112a8565b92604051906040820182811067ffffffffffffffff8211176109785760209660407fcb75aa8347c098d414422e8cafbbe4e2c1a229f5b27bf425984b2b9792aa787a958195600160a09a6109639685528783528c8301908152878452818d52848420925183555191015560028a5220336001600160601b03891b825416179055426112a8565b825191825286820152a15b0151604051908152f35b634e487b7160e01b600052604160045260246000fd5b909250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561024e576040516323b872dd60e01b815230600482015233602482015260448101919091528181606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561024357610a2c575b505060a060209161096e565b610a3682916111e7565b6101135780610a20565b9091506080813d608011610a8a575b81610a5c608093836111fb565b8101031261023f57602081519101516fffffffffffffffffffffffffffffffff81160361023f57903861086e565b3d9150610a4f565b6040513d85823e3d90fd5b634e487b7160e01b89526011600452602489fd5b610ad29060203d602011610ad9575b610aca81836111fb565b810190611255565b50386106e8565b503d610ac0565b6040513d88823e3d90fd5b610b039060203d602011610ad957610aca81836111fb565b503861067e565b602083810151606085015160405163a9059cbb60e01b815230600482015260248101919091529190829060449082908a906001600160a01b03165af1908115610ae0578691610b9e575b506106175760405162461bcd60e51b815260206004820152601960248201527f5472616e73666572206f6620746f6b656e31206661696c6564000000000000006044820152606490fd5b610bb7915060203d602011610ad957610aca81836111fb565b38610b54565b503415610612565b8251604080850151905163a9059cbb60e01b8152306004820152602481019190915290602090829060449082908a906001600160a01b03165af1908115610ae0578691610c57575b506106055760405162461bcd60e51b815260206004820152601960248201527f5472616e73666572206f6620746f6b656e30206661696c6564000000000000006044820152606490fd5b610c70915060203d602011610ad957610aca81836111fb565b38610c0d565b503415610600565b60405180606081011067ffffffffffffffff60608301111761097857606081016040528581528560208201528560408201526004602060018060a01b038651166040519283809263313ce56760e01b82525afa8015610ecc5760ff918891610ed7575b5016815260208481015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610ecc5760ff918891610e9d575b501680602083015260ff825116818114600014610df3575050600160601b60408201525b835160208086015160409384015193516309f56ab160e11b81526001600160a01b039384166004820152908316602482015262ffffff86166044820152928216606484015290829060849082908a907f0000000000000000000000000000000000000000000000000000000000000000165af18015610ae057610dc4575b506105f3565b610de59060203d602011610dec575b610ddd81836111fb565b81019061121d565b5038610dbe565b503d610dd3565b81811115610e5b575050610e21607f610e1860ff84511660ff6020860151169061126d565b60011c16611297565b6001600160a01b0381168103610e475760601b6001600160a01b03166040820152610d40565b634e487b7160e01b87526011600452602487fd5b610e18607f91610e6a9361126d565b8015610e8957600160601b046001600160a01b03166040820152610d40565b634e487b7160e01b87526012600452602487fd5b610ebf915060203d602011610ec5575b610eb781836111fb565b81019061123c565b38610d1c565b503d610ead565b6040513d89823e3d90fd5b610ef0915060203d602011610ec557610eb781836111fb565b38610ce1565b610f0f915060203d602011610dec57610ddd81836111fb565b386105dc565b610f2e915060203d602011610dec57610ddd81836111fb565b38610588565b906040850152606084015261053b565b6001600160a01b03908116808852602088018390527f000000000000000000000000000000000000000000000000000000000000000090911690811460c0880152811460e0870152610520565b6001600160a01b038181167f000000000000000000000000000000000000000000000000000000000000000090911614808015611118575b156110d3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156110cf57604051630d0e30db60e41b81528a81600481347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156110c4576110b1575b50806110a8575b6110a0575b6001600160a01b038281167f00000000000000000000000000000000000000000000000000000000000000009091161480611097575b156104c2573493506104c2565b5083341161108a565b349250611054565b5082341161104f565b6110bd909a919a6111e7565b9838611048565b6040513d8d823e3d90fd5b8980fd5b60405162461bcd60e51b815260206004820152601760248201527f455448206f6e6c7920666f7220574554482070616972730000000000000000006044820152606490fd5b506001600160a01b038381167f000000000000000000000000000000000000000000000000000000000000000090911614610fc9565b634e487b7160e01b87526041600452602487fd5b8580fd5b8480fd5b8380fd5b90503461024e57602036600319011261024e576004358252600260209081526040909220546001600160a01b03168152f35b600435906001600160a01b03821682036111b657565b600080fd5b6000546001600160a01b031633036111cf57565b60405163118cdaa760e01b8152336004820152602490fd5b67ffffffffffffffff811161097857604052565b90601f8019910116810190811067ffffffffffffffff82111761097857604052565b908160209103126111b657516001600160a01b03811681036111b65790565b908160209103126111b6575160ff811681036111b65790565b908160209103126111b6575180151581036111b65790565b9060ff8091169116039060ff821161128157565b634e487b7160e01b600052601160045260246000fd5b60ff16604d811161128157600a0a90565b919082018092116112815756fea264697066735822122014adf4edfc5f4023d903a2148fbb54a3024d62fe01724e829588fb229b5ba02f64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163121cba191461116e57508063308badfc1461040c5780633fc8cef3146103c7578063715018a61461036d578063791b98bc146103285780638da5cb5b1461030157806396e839241461014a578063a76e05f8146101165763f2fde38b0361000f5734610113576020366003190112610113576100a26111a0565b6100aa6111bb565b6001600160a01b039081169081156100fa57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b5034610113576020366003190112610113576040809160043581526001602052206001815491015482519182526020820152f35b50346101135760208060031936011261024e576004359081835260018152600160408420015480156102c5574210610288578183526002815260408320546001600160a01b0390811633036102525783907f000000000000000000000000000000000000000000000000000000000000000016803b1561024e576040516323b872dd60e01b8152306004820152336024820152604481018590529082908290606490829084905af180156102435761022b575b5091600292526001815282600160408220828155015552604081206001600160601b0360a01b815416905580f35b610234906111e7565b61023f5782386101fd565b8280fd5b6040513d84823e3d90fd5b5080fd5b60405162461bcd60e51b815260048101839052600e60248201526d2737ba103a3432903637b1b5b2b960911b6044820152606490fd5b6064906040519062461bcd60e51b825260048201526016602482015275131a5c5d5a591a5d1e481cdd1a5b1b081b1bd8dad95960521b6044820152fd5b60405162461bcd60e51b8152600481018390526014602482015273131a5c5d5a591a5d1e481b9bdd081b1bd8dad95960621b6044820152606490fd5b5034610113578060031936011261011357546040516001600160a01b039091168152602090f35b50346101135780600319360112610113576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101135780600319360112610113576103866111bb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101135780600319360112610113576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50610100366003190112610113576104226111a0565b6024356001600160a01b038116810361023f5760443562ffffff8116810361116a57606435928360020b840361116657608435908160020b820361116257604051938461010081011067ffffffffffffffff6101008701111761114e5761010085016040528685528660208601528660408601528660608601528660808601528660a08601528660c08601528660e086015260a4359060c4359234610f91575b6001600160a01b0390811691908116821015610f44578187526001600160a01b03908116602088018190527f000000000000000000000000000000000000000000000000000000000000000090911680831460c08901521460e08701525b85516001600160a01b031603610f3457604085015260608401525b60405163c45a015560e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610ae0578691610f15575b508351602085810151604051630b4c774160e11b81526001600160a01b039384166004820152908316602482015262ffffff8616604482015292909183916064918391165afa908115610ae0578691610ef6575b506001600160a01b03166080840181905215610c7e575b60c0830151158015610c76575b610bc5575b60e0830151158015610bbd575b610b0a575b8251604080850151905163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482019290925291602091839160449183918b91165af18015610ae057610aeb575b50602083810151606085015160405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201929092529291839160449183918b91165af18015610ae057610ab1575b5082516020840151604085015160608601516001600160a01b03928316979095919493909216904261012c810110610a9d57604051978861016081011067ffffffffffffffff6101608b0111176109785762ffffff926101608a016040528952602089015216604087015260020b606086015260020b608085015260a084015260c08301528260e0830152826101008301523061012083015261012c420161014083015261014060405192634418b22b60e11b845260018060a01b03815116600485015260018060a01b03602082015116602485015262ffffff6040820151166044850152606081015160020b6064850152608081015160020b608485015260a081015160a485015260c081015160c485015260e081015160e485015261010081015161010485015260018060a01b03610120820151166101248501520151610144830152608082610164818660018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1918215610a92578392610a40575b507fac214433e76e20d8f6190bc86fc9f445a27e707c7602379a095289b6cf423549608060018060a01b0383511660018060a01b03602085015116604051918252602082015284604082015260016060820152a160a0810182905260e43592831561098e576108dd84426112a8565b92604051906040820182811067ffffffffffffffff8211176109785760209660407fcb75aa8347c098d414422e8cafbbe4e2c1a229f5b27bf425984b2b9792aa787a958195600160a09a6109639685528783528c8301908152878452818d52848420925183555191015560028a5220336001600160601b03891b825416179055426112a8565b825191825286820152a15b0151604051908152f35b634e487b7160e01b600052604160045260246000fd5b909250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561024e576040516323b872dd60e01b815230600482015233602482015260448101919091528181606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561024357610a2c575b505060a060209161096e565b610a3682916111e7565b6101135780610a20565b9091506080813d608011610a8a575b81610a5c608093836111fb565b8101031261023f57602081519101516fffffffffffffffffffffffffffffffff81160361023f57903861086e565b3d9150610a4f565b6040513d85823e3d90fd5b634e487b7160e01b89526011600452602489fd5b610ad29060203d602011610ad9575b610aca81836111fb565b810190611255565b50386106e8565b503d610ac0565b6040513d88823e3d90fd5b610b039060203d602011610ad957610aca81836111fb565b503861067e565b602083810151606085015160405163a9059cbb60e01b815230600482015260248101919091529190829060449082908a906001600160a01b03165af1908115610ae0578691610b9e575b506106175760405162461bcd60e51b815260206004820152601960248201527f5472616e73666572206f6620746f6b656e31206661696c6564000000000000006044820152606490fd5b610bb7915060203d602011610ad957610aca81836111fb565b38610b54565b503415610612565b8251604080850151905163a9059cbb60e01b8152306004820152602481019190915290602090829060449082908a906001600160a01b03165af1908115610ae0578691610c57575b506106055760405162461bcd60e51b815260206004820152601960248201527f5472616e73666572206f6620746f6b656e30206661696c6564000000000000006044820152606490fd5b610c70915060203d602011610ad957610aca81836111fb565b38610c0d565b503415610600565b60405180606081011067ffffffffffffffff60608301111761097857606081016040528581528560208201528560408201526004602060018060a01b038651166040519283809263313ce56760e01b82525afa8015610ecc5760ff918891610ed7575b5016815260208481015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610ecc5760ff918891610e9d575b501680602083015260ff825116818114600014610df3575050600160601b60408201525b835160208086015160409384015193516309f56ab160e11b81526001600160a01b039384166004820152908316602482015262ffffff86166044820152928216606484015290829060849082908a907f0000000000000000000000000000000000000000000000000000000000000000165af18015610ae057610dc4575b506105f3565b610de59060203d602011610dec575b610ddd81836111fb565b81019061121d565b5038610dbe565b503d610dd3565b81811115610e5b575050610e21607f610e1860ff84511660ff6020860151169061126d565b60011c16611297565b6001600160a01b0381168103610e475760601b6001600160a01b03166040820152610d40565b634e487b7160e01b87526011600452602487fd5b610e18607f91610e6a9361126d565b8015610e8957600160601b046001600160a01b03166040820152610d40565b634e487b7160e01b87526012600452602487fd5b610ebf915060203d602011610ec5575b610eb781836111fb565b81019061123c565b38610d1c565b503d610ead565b6040513d89823e3d90fd5b610ef0915060203d602011610ec557610eb781836111fb565b38610ce1565b610f0f915060203d602011610dec57610ddd81836111fb565b386105dc565b610f2e915060203d602011610dec57610ddd81836111fb565b38610588565b906040850152606084015261053b565b6001600160a01b03908116808852602088018390527f000000000000000000000000000000000000000000000000000000000000000090911690811460c0880152811460e0870152610520565b6001600160a01b038181167f000000000000000000000000000000000000000000000000000000000000000090911614808015611118575b156110d3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156110cf57604051630d0e30db60e41b81528a81600481347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156110c4576110b1575b50806110a8575b6110a0575b6001600160a01b038281167f00000000000000000000000000000000000000000000000000000000000000009091161480611097575b156104c2573493506104c2565b5083341161108a565b349250611054565b5082341161104f565b6110bd909a919a6111e7565b9838611048565b6040513d8d823e3d90fd5b8980fd5b60405162461bcd60e51b815260206004820152601760248201527f455448206f6e6c7920666f7220574554482070616972730000000000000000006044820152606490fd5b506001600160a01b038381167f000000000000000000000000000000000000000000000000000000000000000090911614610fc9565b634e487b7160e01b87526041600452602487fd5b8580fd5b8480fd5b8380fd5b90503461024e57602036600319011261024e576004358252600260209081526040909220546001600160a01b03168152f35b600435906001600160a01b03821682036111b657565b600080fd5b6000546001600160a01b031633036111cf57565b60405163118cdaa760e01b8152336004820152602490fd5b67ffffffffffffffff811161097857604052565b90601f8019910116810190811067ffffffffffffffff82111761097857604052565b908160209103126111b657516001600160a01b03811681036111b65790565b908160209103126111b6575160ff811681036111b65790565b908160209103126111b6575180151581036111b65790565b9060ff8091169116039060ff821161128157565b634e487b7160e01b600052601160045260246000fd5b60ff16604d811161128157600a0a90565b919082018092116112815756fea264697066735822122014adf4edfc5f4023d903a2148fbb54a3024d62fe01724e829588fb229b5ba02f64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2530,
        "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
        "label": "liquidityLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(LockInfo)2501_storage)"
      },
      {
        "astId": 2534,
        "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
        "label": "lockerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(LockInfo)2501_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LiquidityManager.LockInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockInfo)2501_storage"
      },
      "t_struct(LockInfo)2501_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityManager.LockInfo",
        "members": [
          {
            "astId": 2498,
            "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2500,
            "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}